package fiap.backend.domain;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class SubscriptionPlanTest {

    private SubscriptionPlan subscriptionPlan;
    private String testName;
    private BigDecimal testPrice;

    @BeforeEach
    void setUp() {
        testName = "Test Plan";
        testPrice = BigDecimal.valueOf(19.99);
    }

    @Test
    void testDefaultConstructor() {
        // When
        subscriptionPlan = new SubscriptionPlan();

        // Then
        assertNull(subscriptionPlan.getId());
        assertNull(subscriptionPlan.getName());
        assertNull(subscriptionPlan.getPrice());
        assertNotNull(subscriptionPlan.getCreatedAt());
        assertNotNull(subscriptionPlan.getUpdatedAt());
        assertTrue(subscriptionPlan.getIsActive());
    }

    @Test
    void testConstructorWithParameters() {
        // When
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);

        // Then
        assertNull(subscriptionPlan.getId()); // ID is generated by database
        assertEquals(testName, subscriptionPlan.getName());
        assertEquals(testPrice, subscriptionPlan.getPrice());
        assertNotNull(subscriptionPlan.getCreatedAt());
        assertNotNull(subscriptionPlan.getUpdatedAt());
        assertTrue(subscriptionPlan.getIsActive());
    }

    @Test
    void testSettersAndGetters() {
        // Given
        subscriptionPlan = new SubscriptionPlan();
        UUID testId = UUID.randomUUID();
        LocalDateTime testDateTime = LocalDateTime.now();

        // When
        subscriptionPlan.setId(testId);
        subscriptionPlan.setName(testName);
        subscriptionPlan.setPrice(testPrice);
        subscriptionPlan.setCreatedAt(testDateTime);
        subscriptionPlan.setUpdatedAt(testDateTime);
        subscriptionPlan.setIsActive(false);

        // Then
        assertEquals(testId, subscriptionPlan.getId());
        assertEquals(testName, subscriptionPlan.getName());
        assertEquals(testPrice, subscriptionPlan.getPrice());
        assertEquals(testDateTime, subscriptionPlan.getCreatedAt());
        assertEquals(testDateTime, subscriptionPlan.getUpdatedAt());
        assertFalse(subscriptionPlan.getIsActive());
    }

    @Test
    void testPreUpdateCallback() {
        // Given
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);
        LocalDateTime originalUpdatedAt = subscriptionPlan.getUpdatedAt();

        // Wait a bit to ensure time difference
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // When
        subscriptionPlan.onUpdate();

        // Then
        assertTrue(subscriptionPlan.getUpdatedAt().isAfter(originalUpdatedAt));
    }

    @Test
    void testEquals() {
        // Given
        UUID testId = UUID.randomUUID();
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);
        subscriptionPlan.setId(testId);

        SubscriptionPlan otherPlan = new SubscriptionPlan("Other Plan", BigDecimal.valueOf(29.99));
        otherPlan.setId(testId);

        SubscriptionPlan differentPlan = new SubscriptionPlan(testName, testPrice);
        differentPlan.setId(UUID.randomUUID());

        // Then
        assertEquals(subscriptionPlan, otherPlan); // Same ID
        assertNotEquals(subscriptionPlan, differentPlan); // Different ID
        assertNotEquals(subscriptionPlan, null);
        assertNotEquals(subscriptionPlan, "string");
        assertEquals(subscriptionPlan, subscriptionPlan); // Same object
    }

    @Test
    void testHashCode() {
        // Given
        UUID testId = UUID.randomUUID();
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);
        subscriptionPlan.setId(testId);

        SubscriptionPlan otherPlan = new SubscriptionPlan("Other Plan", BigDecimal.valueOf(29.99));
        otherPlan.setId(testId);

        // Then
        assertEquals(subscriptionPlan.hashCode(), otherPlan.hashCode()); // Same ID
    }

    @Test
    void testToString() {
        // Given
        UUID testId = UUID.randomUUID();
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);
        subscriptionPlan.setId(testId);

        // When
        String toString = subscriptionPlan.toString();

        // Then
        assertTrue(toString.contains("SubscriptionPlan"));
        assertTrue(toString.contains(testId.toString()));
        assertTrue(toString.contains(testName));
        assertTrue(toString.contains(testPrice.toString()));
        assertTrue(toString.contains("true")); // isActive default
    }

    @Test
    void testEqualsWithNullId() {
        // Given
        SubscriptionPlan plan1 = new SubscriptionPlan(testName, testPrice);
        SubscriptionPlan plan2 = new SubscriptionPlan(testName, testPrice);

        // Both have null IDs
        plan1.setId(null);
        plan2.setId(null);

        // Then
        assertEquals(plan1, plan2); // Both null IDs should be equal
    }

    @Test
    void testDifferentClassComparison() {
        // Given
        subscriptionPlan = new SubscriptionPlan(testName, testPrice);
        String notAPlan = "I'm not a plan";

        // Then
        assertNotEquals(subscriptionPlan, notAPlan);
    }
}
