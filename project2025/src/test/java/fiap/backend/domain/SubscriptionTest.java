package fiap.backend.domain;

import fiap.backend.domain.Subscription.SubscriptionStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class SubscriptionTest {

    private Subscription subscription;
    private User testUser;
    private SubscriptionPlan testPlan;
    private UUID adminUserId;

    @BeforeEach
    void setUp() {
        testUser = new User();
        testUser.setId(UUID.randomUUID());
        testUser.setEmail("user@test.com");
        testUser.setFirstName("John");
        testUser.setLastName("Doe");

        testPlan = new SubscriptionPlan("Test Plan", BigDecimal.valueOf(19.99));
        testPlan.setId(UUID.randomUUID());

        adminUserId = UUID.randomUUID();
    }

    @Test
    void testDefaultConstructor() {
        // When
        subscription = new Subscription();

        // Then
        assertNull(subscription.getId());
        assertNull(subscription.getUser());
        assertNull(subscription.getPlan());
        assertEquals(SubscriptionStatus.PENDING, subscription.getStatus());
        assertNull(subscription.getApprovedByUserId());
        assertNotNull(subscription.getSubscriptionDate());
        assertNull(subscription.getApprovedDate());
        assertNotNull(subscription.getCreatedAt());
        assertNotNull(subscription.getUpdatedAt());
        assertNull(subscription.getAmount());
    }

    @Test
    void testConstructorWithUserAndPlan() {
        // When
        subscription = new Subscription(testUser, testPlan);

        // Then
        assertNull(subscription.getId()); // ID is generated by database
        assertEquals(testUser, subscription.getUser());
        assertEquals(testPlan, subscription.getPlan());
        assertEquals(SubscriptionStatus.PENDING, subscription.getStatus());
        assertNull(subscription.getApprovedByUserId());
        assertNotNull(subscription.getSubscriptionDate());
        assertNull(subscription.getApprovedDate());
        assertNotNull(subscription.getCreatedAt());
        assertNotNull(subscription.getUpdatedAt());
        assertEquals(testPlan.getPrice(), subscription.getAmount());
    }

    @Test
    void testSettersAndGetters() {
        // Given
        subscription = new Subscription();
        UUID testId = UUID.randomUUID();
        LocalDateTime testDateTime = LocalDateTime.now();
        BigDecimal testAmount = BigDecimal.valueOf(29.99);

        // When
        subscription.setId(testId);
        subscription.setUser(testUser);
        subscription.setPlan(testPlan);
        subscription.setStatus(SubscriptionStatus.APPROVED);
        subscription.setApprovedByUserId(adminUserId);
        subscription.setSubscriptionDate(testDateTime);
        subscription.setApprovedDate(testDateTime);
        subscription.setCreatedAt(testDateTime);
        subscription.setUpdatedAt(testDateTime);
        subscription.setAmount(testAmount);

        // Then
        assertEquals(testId, subscription.getId());
        assertEquals(testUser, subscription.getUser());
        assertEquals(testPlan, subscription.getPlan());
        assertEquals(SubscriptionStatus.APPROVED, subscription.getStatus());
        assertEquals(adminUserId, subscription.getApprovedByUserId());
        assertEquals(testDateTime, subscription.getSubscriptionDate());
        assertEquals(testDateTime, subscription.getApprovedDate());
        assertEquals(testDateTime, subscription.getCreatedAt());
        assertEquals(testDateTime, subscription.getUpdatedAt());
        assertEquals(testAmount, subscription.getAmount());
    }

    @Test
    void testSetPlanUpdatesAmount() {
        // Given
        subscription = new Subscription();
        SubscriptionPlan newPlan = new SubscriptionPlan("New Plan", BigDecimal.valueOf(39.99));

        // When
        subscription.setPlan(newPlan);

        // Then
        assertEquals(newPlan, subscription.getPlan());
        assertEquals(newPlan.getPrice(), subscription.getAmount());
    }

    @Test
    void testSetPlanWithNullPlan() {
        // Given
        subscription = new Subscription(testUser, testPlan);

        // When
        subscription.setPlan(null);

        // Then
        assertNull(subscription.getPlan());
        // Amount should remain unchanged when plan is null
        assertEquals(testPlan.getPrice(), subscription.getAmount());
    }

    @Test
    void testApprove() {
        // Given
        subscription = new Subscription(testUser, testPlan);
        LocalDateTime beforeApproval = LocalDateTime.now();

        // When
        subscription.approve(adminUserId);

        // Then
        assertEquals(SubscriptionStatus.APPROVED, subscription.getStatus());
        assertEquals(adminUserId, subscription.getApprovedByUserId());
        assertNotNull(subscription.getApprovedDate());
        assertTrue(subscription.getApprovedDate().isAfter(beforeApproval) ||
                subscription.getApprovedDate().isEqual(beforeApproval));
        assertNotNull(subscription.getUpdatedAt());
    }

    @Test
    void testReject() {
        // Given
        subscription = new Subscription(testUser, testPlan);
        LocalDateTime beforeRejection = LocalDateTime.now();

        // When
        subscription.reject(adminUserId);

        // Then
        assertEquals(SubscriptionStatus.REJECTED, subscription.getStatus());
        assertEquals(adminUserId, subscription.getApprovedByUserId());
        assertNotNull(subscription.getApprovedDate());
        assertTrue(subscription.getApprovedDate().isAfter(beforeRejection) ||
                subscription.getApprovedDate().isEqual(beforeRejection));
        assertNotNull(subscription.getUpdatedAt());
    }

    @Test
    void testCancel() {
        // Given
        subscription = new Subscription(testUser, testPlan);
        LocalDateTime beforeCancellation = LocalDateTime.now();

        // When
        subscription.cancel();

        // Then
        assertEquals(SubscriptionStatus.CANCELLED, subscription.getStatus());
        assertNotNull(subscription.getUpdatedAt());
        assertTrue(subscription.getUpdatedAt().isAfter(beforeCancellation) ||
                subscription.getUpdatedAt().isEqual(beforeCancellation));
    }

    @Test
    void testIsPending() {
        // Given
        subscription = new Subscription(testUser, testPlan);

        // Then - default status is PENDING
        assertTrue(subscription.isPending());

        // When - change status
        subscription.setStatus(SubscriptionStatus.APPROVED);

        // Then
        assertFalse(subscription.isPending());
    }

    @Test
    void testIsApproved() {
        // Given
        subscription = new Subscription(testUser, testPlan);

        // Then - default status is PENDING
        assertFalse(subscription.isApproved());

        // When - approve subscription
        subscription.approve(adminUserId);

        // Then
        assertTrue(subscription.isApproved());
    }

    @Test
    void testPreUpdateCallback() {
        // Given
        subscription = new Subscription(testUser, testPlan);
        LocalDateTime originalUpdatedAt = subscription.getUpdatedAt();

        // Wait a bit to ensure time difference
        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // When
        subscription.onUpdate();

        // Then
        assertTrue(subscription.getUpdatedAt().isAfter(originalUpdatedAt));
    }

    @Test
    void testEquals() {
        // Given
        UUID testId = UUID.randomUUID();
        subscription = new Subscription(testUser, testPlan);
        subscription.setId(testId);

        Subscription otherSubscription = new Subscription(testUser, testPlan);
        otherSubscription.setId(testId);

        Subscription differentSubscription = new Subscription(testUser, testPlan);
        differentSubscription.setId(UUID.randomUUID());

        // Then
        assertEquals(subscription, otherSubscription); // Same ID
        assertNotEquals(subscription, differentSubscription); // Different ID
        assertNotEquals(subscription, null);
        assertNotEquals(subscription, "string");
        assertEquals(subscription, subscription); // Same object
    }

    @Test
    void testHashCode() {
        // Given
        UUID testId = UUID.randomUUID();
        subscription = new Subscription(testUser, testPlan);
        subscription.setId(testId);

        Subscription otherSubscription = new Subscription(testUser, testPlan);
        otherSubscription.setId(testId);

        // Then
        assertEquals(subscription.hashCode(), otherSubscription.hashCode()); // Same ID
    }

    @Test
    void testToString() {
        // Given
        UUID testId = UUID.randomUUID();
        subscription = new Subscription(testUser, testPlan);
        subscription.setId(testId);

        // When
        String toString = subscription.toString();

        // Then
        assertTrue(toString.contains("Subscription"));
        assertTrue(toString.contains(testId.toString()));
        assertTrue(toString.contains(testUser.getId().toString()));
        assertTrue(toString.contains(testPlan.getId().toString()));
        assertTrue(toString.contains("PENDING")); // Default status
        assertTrue(toString.contains(testPlan.getPrice().toString()));
    }

    @Test
    void testAllSubscriptionStatuses() {
        // Given
        subscription = new Subscription(testUser, testPlan);

        // Test all status values
        for (SubscriptionStatus status : SubscriptionStatus.values()) {
            // When
            subscription.setStatus(status);

            // Then
            assertEquals(status, subscription.getStatus());
        }
    }
}
